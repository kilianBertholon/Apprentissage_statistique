nba2 <- nba[,3:20]
nba2 <- nba2 |> mutate(Playoffs=as.factor(Playoffs))
nba2 <- nba2[,2:18]
nba2<- nba2 |>
select(!c("X3P", "X3PA", "FT"))
#Création du modèle
lm_model <- linear_reg() |>
set_engine("lm") |>  #Préciser le modèle utilisé
set_mode("regression") #Précisé si regréssion ou classification
#Création du jeu de donéne dans les mesures que l'on veut
lm_rec <- recipe(PTS ~ ., data = nba2)  #Préparation des données
#   step_center(all_numeric())|> #Convertir les données au bon format
#   step_scale(all_numeric())
#Création du worflow (zone ou on va pouvoir ajouter les paramètres du model et le jeu de données)
lm_wf <- workflow() |> #Mise en place de l'algorithme a
add_model(lm_model) |> #Ajouter le modèle que l'on a crée
add_recipe(lm_rec)  #Ajout des données que l'on à préparer
#Repréciser les données
lm_fit <- lm_wf |>
fit(data = nba2)
lm_fit |> glance()
##Affichage des données avec :
# Termes du modèles
#Coefficient
#Sd
#Statistivs de tests
#P.value
Resultat_classique <- lm_fit |> tidy()
nba_test <- read.csv("../data/nba/NBA_test.csv", sep = ",")
nba2_test <- nba_test |> mutate(Playoffs=as.factor(Playoffs)) |> select(!c("Team", "Playoffs", "SeasonEnd"))
lm_predict <- lm_fit |> predict(new_data=nba2_test)
#||
#Autre facon
#R^2
#AIC
#BIC
#lm_fit |> glance()
result <- (lm_predict - nba2_test$PTS)
RMSE <- sqrt(mean(lm_predict$.pred-nba2_test$PTS)^2)
ridge_model <- linear_reg() |>
set_engine("glmnet") |> #On utilise la package glmnet car cest celui qui perrmet de faire de la régression ridge ou RIDGE
set_mode("regression") |>
set_args(penalty = tune(), mixture = 0) #Penalty = lambda (on va le tuner), mixture = 0 pour la ridge
#Création du worflow de travail
ridge_wf <- workflow() |>
add_model(ridge_model) |>
add_formula(PTS~.)
#Valdiation croiséee pour trouver le lambda
nba_cv <- vfold_cv(nba2, v=3) #Permet de stocker les diff blocks qui vont permettre de faire de la validation croisée
lambda_grid <- grid_regular(penalty(range = c(-100,2)), levels = 100) #Déinir une grille de lambda pour chosiir celui qui sera optimal. On veut une grille optimal. Range = la puissance (ici de 10^-5 à 10^2)
ridge_cv <- ridge_wf |>
tune_grid(resamples =nba_cv, grid = lambda_grid, metrics = metric_set(rmse)) #Ajustement de la grille en utilisant le workflow (on précise dans resamples les échatntillons, on précise la grille de paramètres que l'on veut utiliser, et la métrics d'évaluations)
#Collecter les metric s
res <- ridge_cv |>
collect_metrics()
#Grpah normale
res |> ggplot(aes(penalty, mean, color = .metric)) + geom_line()
#Graphe à l'échelle logarithmique
res |> ggplot(aes(penalty, mean, color = .metric)) + geom_line() + scale_x_log10()
#Sélectionner le lambda avec le meilleur rmse
lowest_rmse <- ridge_cv |> select_best(metric = "rmse")
#Sélectionner le lambda le plus bas pour RMSE et l'afficher dans notre modèle
final_wf <- finalize_workflow(ridge_wf, lowest_rmse)
#Relancer le modèle sur notre jeu de donnée
final_ridge <- final_wf |>fit(nba2)
final_ridge |> tidy()
resultat_ridge <- final_ridge |> tidy()
Resultat_classique <- lm_fit |> tidy()
nba_test <- read.csv("../data/nba/NBA_test.csv", sep = ",")
nba2_test <- nba_test |> mutate(Playoffs=as.factor(Playoffs)) |> select(!c("Team", "Playoffs", "SeasonEnd"))
lm_predict <- final_ridge |> predict(new_data=nba2_test)
#||
#Autre facon
#R^2
#AIC
#BIC
#lm_fit |> glance()
result <- (lm_predict - nba2_test$PTS)
RMSE <- sqrt(mean(lm_predict$.pred-nba2_test$PTS)^2)
lasso_model <- linear_reg() |>
set_engine("glmnet") |> #On utilise la package glmnet car cest celui qui perrmet de faire de la régression ridge ou LASSO
set_mode("regression") |>
set_args(penalty = tune(), mixture = 1) #Penalty = lambda (on va le tuner), mixture = 1 pour la lasso
#Création du worflow de travail
lasso_wf <- workflow() |>
add_model(lasso_model) |>
add_formula(PTS~.)
#Valdiation croiséee pour trouver le lambda
nba_cv <- vfold_cv(nba2, v=3) #Permet de stocker les diff blocks qui vont permettre de faire de la validation croisée
lambda_grid <- grid_regular(penalty(range = c(-2,2)), levels = 100) #Déinir une grille de lambda pour chosiir celui qui sera optimal. On veut une grille optimal. Range = la puissance (ici de 10^-5 à 10^2)
lasso_cv <- lasso_wf |>
tune_grid(resamples =nba_cv, grid = lambda_grid, metrics = metric_set(rmse)) #Ajustement de la grille en utilisant le workflow (on précise dans resamples les échatntillons, on précise la grille de paramètres que l'on veut utiliser, et la métrics d'évaluations)
#Collecter les metric s
res <- lasso_cv |>
collect_metrics()
#Grpah normale
res |> ggplot(aes(penalty, mean, color = .metric)) + geom_line()
#Graphe à l'échelle logarithmique
res |> ggplot(aes(penalty, mean, color = .metric)) + geom_line() + scale_x_log10()
#Sélectionner le lambda avec le meilleur rmse
lowest_rmse <- lasso_cv |> select_best(metric = "rmse")
#Sélectionner le lambda le plus bas pour RMSE et l'afficher dans notre modèle
final_wf <- finalize_workflow(lasso_wf, lowest_rmse)
#Relancer le modèle sur notre jeu de donnée
final_lasso <- final_wf |>fit(nba2)
final_lasso |> tidy()
nba_test <- read.csv("../data/nba/NBA_test.csv", sep = ",")
nba2_test <- nba_test |> mutate(Playoffs=as.factor(Playoffs)) |> select(!c("Team", "Playoffs", "SeasonEnd"))
lm_predict <- final_lasso |> predict(new_data=nba2_test)
#||
#Autre facon
#R^2
#AIC
#BIC
#lm_fit |> glance()
result <- (lm_predict - nba2_test$PTS)
RMSE <- sqrt(mean(lm_predict$.pred-nba2_test$PTS)^2)
#Import et nettoyage des donénes
#Jeux de données1
library(dplyr)
library(tidymodels)
library(ggplot2)
nba <- read.csv("../data/nba/NBA_train.csv", sep = ",")
nba_utils <- nba |> select(!c("Team", "SeasonEnd","X3P", "X3PA", "FT"))
nba_utils$Playoffs <- as.factor(nba_utils$Playoffs)
#Jeux de données de validations
nba_test <- read.csv("../data/nba/NBA_test.csv", sep = ",")
nba2_test <- nba_test |> mutate(Playoffs=as.factor(Playoffs)) |> select(!c("Team", "SeasonEnd","X3P", "X3PA", "FT"))
nba2_test$Playoffs <- as.factor(nba2_test$Playoffs)
#Création de la régression logistique
nba_relog <- glm(Playoffs~., data = nba_utils, family = "binomial")
log_model <- logistic_reg() |>
set_engine("glm") |>
set_mode("classification")
#Création de workflow
log_wf <- workflow() |>
add_model(log_model) |>
add_formula(Playoffs~.)
#Ajustement du model sur les données
log_fit <- log_wf |>
fit(data=nba_utils)
#Prédiction
log_predict <- log_fit |> predict(new_data=nba2_test, type="class")
#Ou pour récupéréer les probas
log_prob <- log_fit |> predict(new_data=nba2_test, type="prob")
#Afficher le vrai tableau avec notre tableau en comparaison
nba_tfit <- nba2_test[, "Playoffs"] |> bind_cols(log_predict, log_prob)
confusion <- yardstick::conf_mat(nba_tfit,
truth = "...1",
estimate= ".pred_class",
dnn = c("Prediction", "Truth"))
summary(confusion)
lasso_rec <- recipe(Playoffs~.)
#### Chargement des packages ####
library(jsonlite)
library(tidyr)
library(ggplot2)
library(dplyr)
library(corrplot)
library(ggraph)
library(tidymodels)
library(xgboost)
library(doParallel)
library(vip)
library(plotly)
library(yardstick)
#Indiquer les années disponibles
year_available <- 2019:2023
#Boucle de création du dataframe à partir des nom de fichiers
for (annee in year_available) {
fichier_data <- paste0("resultat_football_", annee, ".json")
data <- fromJSON(fichier_data)
top10 <- data$Top10_championnat
hors_top10 <- data$Autres
data <- rbind(top10, hors_top10)
data = data[-1]
data <- separate(data, info, into = c("Poste", "Club", "Age"), sep = ",\\s*")
data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
#Indiquer les années disponibles
year_available <- 2019:2023
#Boucle de création du dataframe à partir des nom de fichiers
for (annee in year_available) {
fichier_data <- paste0("resultat_football_", annee, ".json")
data <- fromJSON(fichier_data)
top10 <- data$Top10_championnat
hors_top10 <- data$Autres
data <- rbind(top10, hors_top10)
data = data[-1]
data <- separate(data, info, into = c("Poste", "Club", "Age"), sep = ",\\s*")
data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
#Indiquer les années disponibles
year_available <- 2019:2023
#Boucle de création du dataframe à partir des nom de fichiers
for (annee in year_available) {
fichier_data <- paste0("resultat_football_", annee, ".json")
data <- fromJSON(fichier_data)
top10 <- data$Top10_championnat
hors_top10 <- data$Autres
data <- rbind(top10, hors_top10)
data = data[-1]
data <- separate(data, info, into = c("Poste", "Club", "Age"), sep = ",\\s*")
data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
#### Chargement des packages ####
library(jsonlite)
library(tidyr)
library(ggplot2)
library(dplyr)
library(corrplot)
library(ggraph)
library(tidymodels)
library(xgboost)
library(doParallel)
library(vip)
library(plotly)
library(yardstick)
#Indiquer les années disponibles
year_available <- 2019:2023
#Boucle de création du dataframe à partir des nom de fichiers
for (annee in year_available) {
fichier_data <- paste0("resultat_football_", annee, ".json")
data <- fromJSON(fichier_data)
top10 <- data$Top10_championnat
hors_top10 <- data$Autres
data <- rbind(top10, hors_top10)
data = data[-1]
data <- separate(data, info, into = c("Poste", "Club", "Age"), sep = ",\\s*")
data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
#Indiquer les années disponibles
year_available <- 2019:2023
#Boucle de création du dataframe à partir des nom de fichiers
for (annee in year_available) {
fichier_data <- paste0("resultat_football_", annee, ".json")
data <- fromJSON(fichier_data)
top10 <- data$Top10_championnat
hors_top10 <- data$Autres
data <- rbind(top10, hors_top10)
data = data[-1]
data <- separate(data, info, into = c("Poste", "Club", "Age"), sep = ",\\s*")
data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
#Indiquer les années disponibles
year_available <- 2019:2023
#Boucle de création du dataframe à partir des nom de fichiers
for (annee in year_available) {
fichier_data <- paste0("resultat_football_", annee, ".json")
data <- fromJSON(fichier_data)
top10 <- data$Top10_championnat
hors_top10 <- data$Autres
data <- rbind(top10, hors_top10)
data = data[-1]
data <- separate(data, info, into = c("Poste", "Club", "Age"), sep = ",\\s*")
data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
#Indiquer les années disponibles
year_available <- c(2019, 2020, 2021, 2022, 2023)
#Boucle de création du dataframe à partir des nom de fichiers
for (annee in year_available) {
fichier_data <- paste0("resultat_football_", annee, ".json")
data <- fromJSON(fichier_data)
top10 <- data$Top10_championnat
hors_top10 <- data$Autres
data <- rbind(top10, hors_top10)
data = data[-1]
data <- separate(data, info, into = c("Poste", "Club", "Age"), sep = ",\\s*")
data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
#Indiquer les années disponibles
year_available <- c(2019, 2020, 2021, 2022, 2023)
#Boucle de création du dataframe à partir des nom de fichiers
for (annee in year_available) {
fichier_data <- paste0("resultat_football_", annee, ".json")
data <- fromJSON(fichier_data)
top10 <- data$Top10_championnat
hors_top10 <- data$Autres
data <- rbind(top10, hors_top10)
data = data[-1]
data <- separate(data, info, into = c("Poste", "Club", "Age"), sep = ",\\s*")
data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
#Indiquer les années disponibles
year_available <- c(2019, 2020, 2021, 2022, 2023)
#Boucle de création du dataframe à partir des nom de fichiers
for (annee in year_available) {
fichier_data <- paste0("resultat_football_", annee, ".json")
data <- fromJSON(fichier_data)
top10 <- data$Top10_championnat
hors_top10 <- data$Autres
data <- rbind(top10, hors_top10)
data = data[-1]
data <- separate(data, info, into = c("Poste", "Club", "Age"), sep = ",\\s*")
data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
#### Chargement des packages ####
library(jsonlite)
library(tidyr)
library(ggplot2)
library(dplyr)
library(corrplot)
library(ggraph)
library(tidymodels)
library(xgboost)
library(doParallel)
library(vip)
library(plotly)
library(yardstick)
#Indiquer les années disponibles
year_available <- c(2019, 2020, 2021, 2022, 2023)
#Boucle de création du dataframe à partir des nom de fichiers
for (annee in year_available) {
fichier_data <- paste0("resultat_football_", annee, ".json")
data <- fromJSON(fichier_data)
top10 <- data$Top10_championnat
hors_top10 <- data$Autres
data <- rbind(top10, hors_top10)
data = data[-1]
data <- separate(data, info, into = c("Poste", "Club", "Age"), sep = ",\\s*")
data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
#### Chargement des packages ####
library(jsonlite)
library(tidyr)
library(ggplot2)
library(dplyr)
library(corrplot)
library(ggraph)
library(tidymodels)
library(xgboost)
library(doParallel)
library(vip)
library(plotly)
library(yardstick)
#Indiquer les années disponibles
year_available <- 2019:2023
#Boucle de création du dataframe à partir des nom de fichiers
for (annee in year_available) {
fichier_data <- paste0("resultat_football_", annee, ".json")
data <- fromJSON(fichier_data)
top10 <- data$Top10_championnat
hors_top10 <- data$Autres
data <- rbind(top10, hors_top10)
data = data[-1]
data <- separate(data, info, into = c("Poste", "Club", "Age"), sep = ",\\s*")
data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
#Indiquer les années disponibles
year_available <- 2019:2023
#Boucle de création du dataframe à partir des nom de fichiers
for (annee in year_available) {
fichier_data <- paste0("resultat_football_", annee, ".json")
data <- fromJSON(fichier_data)
top10 <- data$Top10_championnat
hors_top10 <- data$Autres
data <- rbind(top10, hors_top10)
data = data[-1]
data <- separate(data, info, into = c("Poste", "Club", "Age"), sep = ",\\s*")
data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
#Indiquer les années disponibles
year_available <- 2019:2023
#Boucle de création du dataframe à partir des nom de fichiers
for (annee in year_available) {
fichier_data <- paste0("resultat_football_", annee, ".json")
data <- fromJSON(fichier_data)
top10 <- data$Top10_championnat
hors_top10 <- data$Autres
data <- rbind(top10, hors_top10)
data = data[-1]
data <- separate(data, info, into = c("Poste", "Club", "Age"), sep = ",\\s*")
data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
#### Chargement des packages ####
library(jsonlite)
library(tidyr)
library(ggplot2)
library(dplyr)
library(corrplot)
library(ggraph)
library(tidymodels)
library(xgboost)
library(doParallel)
library(vip)
library(plotly)
library(yardstick)
#Indiquer les années disponibles
year_available <- 2019:2023
#Boucle de création du dataframe à partir des nom de fichiers
for (annee in year_available) {
fichier_data <- paste0("resultat_football_", annee, ".json")
data <- fromJSON(fichier_data)
top10 <- data$Top10_championnat
hors_top10 <- data$Autres
data <- rbind(top10, hors_top10)
data = data[-1]
data <- separate(data, info, into = c("Poste", "Club", "Age"), sep = ",\\s*")
data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
