data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
#Indiquer les années disponibles
year_available <- 2019:2023
#Boucle de création du dataframe à partir des nom de fichiers
for (annee in year_available) {
fichier_data <- paste0("resultat_football_", annee, ".json")
data <- fromJSON(fichier_data)
top10 <- data$Top10_championnat
hors_top10 <- data$Autres
data <- rbind(top10, hors_top10)
data = data[-1]
data <- separate(data, info, into = c("Poste", "Club", "Age"), sep = ",\\s*")
data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
#Indiquer les années disponibles
year_available <- 2019:2023
#Boucle de création du dataframe à partir des nom de fichiers
for (annee in year_available) {
fichier_data <- paste0("resultat_football_", annee, ".json")
data <- fromJSON(fichier_data)
top10 <- data$Top10_championnat
hors_top10 <- data$Autres
data <- rbind(top10, hors_top10)
data = data[-1]
data <- separate(data, info, into = c("Poste", "Club", "Age"), sep = ",\\s*")
data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
#Indiquer les années disponibles
year_available <- c(2019, 2020, 2021, 2022, 2023)
#Boucle de création du dataframe à partir des nom de fichiers
for (annee in year_available) {
fichier_data <- paste0("resultat_football_", annee, ".json")
data <- fromJSON(fichier_data)
top10 <- data$Top10_championnat
hors_top10 <- data$Autres
data <- rbind(top10, hors_top10)
data = data[-1]
data <- separate(data, info, into = c("Poste", "Club", "Age"), sep = ",\\s*")
data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
#Indiquer les années disponibles
year_available <- c(2019, 2020, 2021, 2022, 2023)
#Boucle de création du dataframe à partir des nom de fichiers
for (annee in year_available) {
fichier_data <- paste0("resultat_football_", annee, ".json")
data <- fromJSON(fichier_data)
top10 <- data$Top10_championnat
hors_top10 <- data$Autres
data <- rbind(top10, hors_top10)
data = data[-1]
data <- separate(data, info, into = c("Poste", "Club", "Age"), sep = ",\\s*")
data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
#Indiquer les années disponibles
year_available <- c(2019, 2020, 2021, 2022, 2023)
#Boucle de création du dataframe à partir des nom de fichiers
for (annee in year_available) {
fichier_data <- paste0("resultat_football_", annee, ".json")
data <- fromJSON(fichier_data)
top10 <- data$Top10_championnat
hors_top10 <- data$Autres
data <- rbind(top10, hors_top10)
data = data[-1]
data <- separate(data, info, into = c("Poste", "Club", "Age"), sep = ",\\s*")
data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
#### Chargement des packages ####
library(jsonlite)
library(tidyr)
library(ggplot2)
library(dplyr)
library(corrplot)
library(ggraph)
library(tidymodels)
library(xgboost)
library(doParallel)
library(vip)
library(plotly)
library(yardstick)
#Indiquer les années disponibles
year_available <- c(2019, 2020, 2021, 2022, 2023)
#Boucle de création du dataframe à partir des nom de fichiers
for (annee in year_available) {
fichier_data <- paste0("resultat_football_", annee, ".json")
data <- fromJSON(fichier_data)
top10 <- data$Top10_championnat
hors_top10 <- data$Autres
data <- rbind(top10, hors_top10)
data = data[-1]
data <- separate(data, info, into = c("Poste", "Club", "Age"), sep = ",\\s*")
data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
#### Chargement des packages ####
library(jsonlite)
library(tidyr)
library(ggplot2)
library(dplyr)
library(corrplot)
library(ggraph)
library(tidymodels)
library(xgboost)
library(doParallel)
library(vip)
library(plotly)
library(yardstick)
#Indiquer les années disponibles
year_available <- 2019:2023
#Boucle de création du dataframe à partir des nom de fichiers
for (annee in year_available) {
fichier_data <- paste0("resultat_football_", annee, ".json")
data <- fromJSON(fichier_data)
top10 <- data$Top10_championnat
hors_top10 <- data$Autres
data <- rbind(top10, hors_top10)
data = data[-1]
data <- separate(data, info, into = c("Poste", "Club", "Age"), sep = ",\\s*")
data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
#Indiquer les années disponibles
year_available <- 2019:2023
#Boucle de création du dataframe à partir des nom de fichiers
for (annee in year_available) {
fichier_data <- paste0("resultat_football_", annee, ".json")
data <- fromJSON(fichier_data)
top10 <- data$Top10_championnat
hors_top10 <- data$Autres
data <- rbind(top10, hors_top10)
data = data[-1]
data <- separate(data, info, into = c("Poste", "Club", "Age"), sep = ",\\s*")
data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
#Indiquer les années disponibles
year_available <- 2019:2023
#Boucle de création du dataframe à partir des nom de fichiers
for (annee in year_available) {
fichier_data <- paste0("resultat_football_", annee, ".json")
data <- fromJSON(fichier_data)
top10 <- data$Top10_championnat
hors_top10 <- data$Autres
data <- rbind(top10, hors_top10)
data = data[-1]
data <- separate(data, info, into = c("Poste", "Club", "Age"), sep = ",\\s*")
data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
#### Chargement des packages ####
library(jsonlite)
library(tidyr)
library(ggplot2)
library(dplyr)
library(corrplot)
library(ggraph)
library(tidymodels)
library(xgboost)
library(doParallel)
library(vip)
library(plotly)
library(yardstick)
#Indiquer les années disponibles
year_available <- 2019:2023
#Boucle de création du dataframe à partir des nom de fichiers
for (annee in year_available) {
fichier_data <- paste0("resultat_football_", annee, ".json")
data <- fromJSON(fichier_data)
top10 <- data$Top10_championnat
hors_top10 <- data$Autres
data <- rbind(top10, hors_top10)
data = data[-1]
data <- separate(data, info, into = c("Poste", "Club", "Age"), sep = ",\\s*")
data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
#### Chargement des packages ####
library(jsonlite)
library(tidyr)
library(ggplot2)
library(dplyr)
library(corrplot)
library(ggraph)
library(tidymodels)
library(xgboost)
library(doParallel)
library(vip)
library(plotly)
library(yardstick)
#Indiquer les années disponibles
year_available <- 2019:2023
#Boucle de création du dataframe à partir des nom de fichiers
for (annee in year_available) {
fichier_data <- paste0("resultat_football_", annee, ".json")
data <- fromJSON(fichier_data)
top10 <- data$Top10_championnat
hors_top10 <- data$Autres
data <- rbind(top10, hors_top10)
data = data[-1]
data <- separate(data, info, into = c("Poste", "Club", "Age"), sep = ",\\s*")
data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
all_data <- rbind(data_2023, data_2022, data_2021, data_2020, data_2019)
summary(all_data)
#### Chargement des packages ####
library(jsonlite)
library(tidyr)
library(ggplot2)
library(dplyr)
library(corrplot)
library(ggraph)
library(tidymodels)
library(xgboost)
library(doParallel)
library(vip)
library(plotly)
library(yardstick)
#Indiquer les années disponibles
year_available <- 2019:2023
#Boucle de création du dataframe à partir des nom de fichiers
for (annee in year_available) {
fichier_data <- paste0("resultat_football_", annee, ".json")
data <- fromJSON(fichier_data)
top10 <- data$Top10_championnat
hors_top10 <- data$Autres
data <- rbind(top10, hors_top10)
data = data[-1]
data <- separate(data, info, into = c("Poste", "Club", "Age"), sep = ",\\s*")
data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
all_data <- rbind(data_2023, data_2022, data_2021, data_2020, data_2019)
summary(all_data)
#Les postes étaient avant des postes précis (milieu offensif droit par exemple. Par soucis de compréhension nous remplacons ces postes par 4 modalités (Gardien, défenseur, milieu et attaquant))
all_data <- all_data %>%
mutate(Poste_global = case_when(
Poste %in% c("AM", "CF", "LW", "RW") ~ "Attaquant",
Poste %in% c("CB", "DF", "LB", "RB") ~ "Défenseur",
Poste %in% c("CM", "DM", "LM", "MF", "RM") ~ "Milieu",
Poste == "GK" ~ "Gardien",
Poste == '' ~ NA,
TRUE ~ "Autre"
))
ggplot(all_data, aes(x = Poste_global)) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Distribution des postes des joueurs de foot",
x = "Poste",
y = "Nombre de joueurs")
# Créez un histogramme de l'âge
ggplot(all_data, aes(x = Age)) +
geom_histogram(binwidth = 1, fill = "cyan", color = "black", alpha = 0.7) +
labs(title = "Distribution de l'âge des joueurs", x = "Âge", y = "Fréquence")
all_data$Poste_global <- factor(all_data$Poste_global, levels = c("Gardien", "Défenseur", "Milieu", "Attaquant", "NA"))
ggplot(all_data, aes(x = Poste_global, y = But)) +
geom_boxplot(fill = "skyblue", color = "black") +
labs(title = "Distribution des buts par poste global",
x = "Poste Global",
y = "Buts")
# Créez un boxplot pour la distribution des passes décisives en fonction du poste global
ggplot(all_data, aes(x = Poste_global, y = PasseDecisive, fill = Poste_global)) +
geom_boxplot() +
labs(title = "Distribution des passes décisives en fonction du poste global", x = "Poste global", y = "Passe décisives") +
scale_fill_brewer(palette = "Set3")  # Vous pouvez changer la palette de couleurs selon vos préférences
Min_joue_poste<- ggplot(all_data, aes(x = Poste_global, y = minJ, fill = Poste_global)) +
geom_boxplot() +  # Utiliser un boxplot pour la distribution
labs(title = "Distribution des Minutes jouées par poste ",
x = "Poste ",
y = "Minutes jouées")
# Afficher le graphique
print(Min_joue_poste)
# Créez un boxplot pour la distribution des passes décisives en fonction du poste global
ggplot(all_data, aes(x = Poste_global, y = Apparences, fill = Poste_global)) +
geom_boxplot() +
labs(title = "Distribution des apparitions des joueurs en fonction du poste global", x = "Poste global", y = "Apparitions") +
scale_fill_brewer(palette = "Set3")  # Vous pouvez changer la palette de couleurs selon vos préférences
# Créez un boxplot pour la distribution des Notes fonction du poste global
ggplot(all_data, aes(x = Poste_global, y = Note, fill = Poste_global)) +
geom_boxplot() +
labs(title = "Distribution des notes des joueurs en fonction du poste global", x = "Poste global", y = "Note") +
scale_fill_brewer(palette = "Set3")  # Vous pouvez changer la palette de couleurs selon vos préférences
ggplot(all_data, aes(x = Poste_global, y = Tirs, fill = Poste_global)) +
geom_boxplot() +
labs(title = "Distribution des tirs des joueurs en fonction du poste global", x = "Poste global", y = "Tirs") +
scale_fill_brewer(palette = "Set3")
ggplot(all_data, aes(x = Poste_global, y = Dribbles , fill = Poste_global)) +
geom_boxplot() +
labs(title = "Distribution des dribbles des joueurs en fonction du poste global", x = "Poste global", y = "Dribbles") +
scale_fill_brewer(palette = "Set3")
ggplot(all_data, aes(x = Poste_global, y = Passes_perc , fill = Poste_global)) +
geom_boxplot() +
labs(title = "Distribution des pourcentages de passes réussies des joueurs en fonction du poste global", x = "Poste global", y = "Pourcentage de passes réussies") +
scale_fill_brewer(palette = "Set3")
ggplot(all_data, aes(x = Poste_global, y = moy_passes , fill = Poste_global)) +
geom_boxplot() +
labs(title = "Distribution des moyennes des passes clées des joueurs en fonction du poste global", x = "Poste global", y = "Moyenne de passes clées par match") +
scale_fill_brewer(palette = "Set3")
ggplot(all_data, aes(x = Poste_global, y = centre_perc , fill = Poste_global)) +
geom_boxplot() +
labs(title = "Distribution des pourcentages de centres réussies des joueurs en fonction du poste global", x = "Poste global", y = "Pourcentage de centres réussis") +
scale_fill_brewer(palette = "Set3")
ggplot(all_data, aes(x = Poste_global, y = degagement , fill = Poste_global)) +
geom_boxplot() +
labs(title = "Distribution des dégagements des joueurs en fonction du poste global", x = "Poste global", y = "Dégagements") +
scale_fill_brewer(palette = "Set3")
all_data <- subset(all_data, select = -degagement)
ggplot(all_data, aes(x = Poste_global, y = interception , fill = Poste_global)) +
geom_boxplot() +
labs(title = "Distribution des interceptions des joueurs en fonction du poste global", x = "Poste global", y = "interception") +
scale_fill_brewer(palette = "Set3")
ggplot(all_data, aes(x = Poste_global, y = TaclesRecu, fill = Poste_global)) +
geom_boxplot() +
labs(title = "Tacles recus par postes",
x = "Postes ",
y = "Tacles recus")
ggplot(all_data, aes(x = Poste_global, y = tirsBloques, fill = Poste_global)) +
geom_boxplot() +
labs(title = "Tirs bloqués par par postes",
x = "Postes ",
y = "Tirs bloqués")
ggplot(all_data, aes(x = Poste_global, y = driblesSubis, fill = Poste_global)) +
geom_boxplot() +
labs(title = "Dribles subis par par postes",
x = "Postes ",
y = "Dribles Subis")
ggplot(all_data, aes(x = Poste_global, y = fautes, fill = Poste_global)) +
geom_boxplot() +
labs(title = "Fautes par postes",
x = "Postes",
y = "Fautes moyenne par match")
ggplot(all_data, aes(x = Poste_global, y = TaclesRecu, fill = Poste_global)) +
geom_boxplot() +
labs(title = "Tacles recu par postes",
x = "Poste ",
y = "Tacles recu")
ggplot(all_data, aes(x = Poste_global, y = HorsJeu, fill = Poste_global)) +
geom_boxplot() +
labs(title = "Hors jeu par postes",
x = "Poste ",
y = "Hors jeu")
all_data <- subset(all_data, select = -HorsJeu)
table_annee <- data.frame(table(all_data$Annee))
ggplot(table_annee, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Observation par années",
x = "Année",
y = "Observations")
# Sélectionner seulement les colonnes avec des variables quantitatives
variables_quantitatives <- all_data %>%
select_if(is.numeric)
variables_quantitatives <- na.omit(variables_quantitatives)
# Calculer la matrice de corrélation
matrice_correlation <- cor(variables_quantitatives, use = "complete.obs")
# Afficher une heatmap avec corrplot
corrplot(matrice_correlation, method = "color", type = "lower", diag = FALSE, col = COL2('RdYlBu', 10))
Gardien <- all_data |> filter(Poste_global == "Gardien")
Defenseur <- all_data |> filter(Poste_global == "Défenseur")
Milieu <- all_data |> filter(Poste_global == "Milieu")
Attaquant <- all_data |> filter(Poste_global == "Attaquant")
density <- ggplot(all_data, aes(Note, color = Poste_global)) + geom_density()
density
#### Diviser en entrainement et test
set.seed(123)
data_split <- initial_split(all_data, prop = 0.8, strata = Note)
data_train <- training(data_split)
data_test <- testing(data_split)
#### Mise en place des modèles sans sélection de poste ####
data_train <- subset(data_train, select = -c(nom, Poste, Club, Annee, Poste_global))
data_train <- na.omit(data_train, cols = "Note")
data_test <- subset(data_test, select = -c(nom, Poste, Club, Annee, Poste_global))
data_test <- na.omit(data_test, cols = "Note")
show_engines("rand_forest")
#?randomForest::randomForest
?ranger::ranger
# rf <- randomForest::randomForest(Note~.,data=data_train)
# rf
rf <- ranger::ranger(Note~.,data=data_train)
rf
rf$prediction.error
OOB <- numeric(16)
for (i in 1:16) {
rf <- ranger::ranger(Note~.,data=data_train,mtry=i)
OOB[i]<-rf$prediction.error
}
OOB
#graphe de l'erreur Out of Bag
plot(1:16,OOB,type="l")
#Mtry optimisé
mtry_opt <- which.min(OOB)
mtry_opt
#Estimation du risque de la forêt avec le paramètre mtry ajusté/optimisé sur l’échantillon test
rf_opt <- ranger::ranger(Note~.,data=data_train,mtry=mtry_opt)
pred <- predict(rf_opt,data=data_test)
attributes(pred)
pred$predictions
risque.est <- mean(data_test$Note!=pred$predictions)
print(risque.est)
# Définir la grille de recherche d'hyperparamètres pour la régression
pargrid_regression <- data.frame(mtry = 1:16, splitrule = rep("variance", 16), min.node.size = rep(1, 16))
# Entraîner le modèle avec la règle de division "variance"
rfopt <- caret::train(Note ~ ., data = data_train, method = "ranger", tuneGrid = pargrid_regression, trControl = caret::trainControl(method = "oob"))
# Afficher les résultats
print(rfopt)
plot(rfopt$results$mtry,rfopt$results$Accuracy,type="l")
pred <- predict(rfopt$finalModel,data=data_test)
risque.est <- mean(data_test$Note!=pred$predictions)
print(risque.est)
rf_rec <- recipe(Note ~ ., data = data_train)
folds <- vfold_cv(data_train, v = 3, repeats = 1, strata = Note)
rf_model <- rand_forest(mtry=tune()) |>
set_mode("regression") |>
set_engine("ranger",oob.error=TRUE)
rf_wf <- workflow() |>
add_model(rf_model) |>
add_recipe(rf_rec)
par_grid <- tibble(mtry=1:16)
rf_cv <- rf_wf |>
tune_grid(resamples = folds, grid = par_grid, metrics = metric_set(rmse))
pred
pred$predictions
risque.est
data_test
