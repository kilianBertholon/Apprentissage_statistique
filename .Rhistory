data$Age <- sub("yrs", "", data$Age)
data$Passes_perc <- (as.numeric(sub("%", "", data$Passes_perc)))
data <- data %>% rename(Apparences = CartonJaune)
cols_to_convert <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Note", "Tirs",
"Dribbles", "moy_passes", "centre_perc", "degagement", "interception",
"tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu", "HorsJeu")
data[, cols_to_convert] <- lapply(data[, cols_to_convert], function(x) as.numeric(gsub("'", "", x)))
data$Annee <- as.character(annee)
assign(paste0("data_", annee), data)
}
all_data <- rbind(data_2023, data_2022, data_2021, data_2020, data_2019)
summary(all_data)
all_data <- all_data %>%
mutate(Poste_globale = case_when(
Poste %in% c("AM", "CF", "LW", "RW") ~ "Attaquant",
Poste %in% c("CB", "DF", "LB", "RB") ~ "Défenseur",
Poste %in% c("CM", "DM", "LM", "MF", "RM") ~ "Milieu",
Poste == "GK" ~ "Gardien",
Poste == '' ~ NA,
TRUE ~ "Autre"
))
Distri_postes <- ggplot(all_data, aes(x = Poste_globale)) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Distribution des postes des joueurs de foot",
x = "Poste",
y = "Nombre de joueurs")
Distri_postes
# Créez un histogramme de l'âge
ggplot(all_data, aes(x = Age)) +
geom_histogram(binwidth = 1, fill = "cyan", color = "black", alpha = 0.7) +
labs(title = "Distribution de l'âge des joueurs", x = "Âge", y = "Fréquence")
all_data$Poste_globale <- factor(all_data$Poste_globale, levels = c("Gardien", "Défenseur", "Milieu", "Attaquant", "NA"))
Distri_but_Poste<- ggplot(all_data, aes(x = Poste_globale, y = But)) +
geom_boxplot(fill = "skyblue", color = "black") +  # Utiliser un boxplot pour la distribution
labs(title = "Distribution des buts par poste global",
x = "Poste Global",
y = "Buts")
# Afficher le graphique
print(Distri_but_Poste)
# Créez un boxplot pour la distribution des passes décisives en fonction du poste global
ggplot(all_data, aes(x = Poste_globale, y = PasseDecisive, fill = Poste_globale)) +
geom_boxplot() +
labs(title = "Distribution des passes décisives en fonction du poste global", x = "Poste global", y = "Passe décisives") +
scale_fill_brewer(palette = "Set3")  # Vous pouvez changer la palette de couleurs selon vos préférences
Min_joue_poste<- ggplot(all_data, aes(x = Poste_globale, y = minJ, fill = Poste_globale)) +
geom_boxplot() +  # Utiliser un boxplot pour la distribution
labs(title = "Distribution des Minutes jouées par poste ",
x = "Poste ",
y = "Minutes jouées")
# Afficher le graphique
print(Min_joue_poste)
# Créez un boxplot pour la distribution des passes décisives en fonction du poste global
ggplot(all_data, aes(x = Poste_globale, y = Apparences, fill = Poste_globale)) +
geom_boxplot() +
labs(title = "Distribution des apparitions des joueurs en fonction du poste global", x = "Poste global", y = "Apparitions") +
scale_fill_brewer(palette = "Set3")  # Vous pouvez changer la palette de couleurs selon vos préférences
# Créez un boxplot pour la distribution des passes décisives en fonction du poste global
ggplot(all_data, aes(x = Poste_globale, y = Note, fill = Poste_globale)) +
geom_boxplot() +
labs(title = "Distribution des notes des joueurs en fonction du poste global", x = "Poste global", y = "Note") +
scale_fill_brewer(palette = "Set3")  # Vous pouvez changer la palette de couleurs selon vos préférences
ggplot(all_data, aes(x = Poste_globale, y = Tirs, fill = Poste_globale)) +
geom_boxplot() +
labs(title = "Distribution des tirs des joueurs en fonction du poste global", x = "Poste global", y = "Tirs") +
scale_fill_brewer(palette = "Set3")  # Vous pouvez changer la palette de couleurs selon vos préférences
ggplot(all_data, aes(x = Poste_globale, y = Dribbles , fill = Poste_globale)) +
geom_boxplot() +
labs(title = "Distribution des dribbles des joueurs en fonction du poste global", x = "Poste global", y = "Dribbles") +
scale_fill_brewer(palette = "Set3")  # Vous pouvez changer la palette de couleurs selon vos préférences
ggplot(all_data, aes(x = Poste_globale, y = Passes_perc , fill = Poste_globale)) +
geom_boxplot() +
labs(title = "Distribution des pourcentages de passes réussies des joueurs en fonction du poste global", x = "Poste global", y = "Pourcentage de passes réussies") +
scale_fill_brewer(palette = "Set3")  # Vous pouvez changer la palette de couleurs selon vos préférences
ggplot(all_data, aes(x = Poste_globale, y = moy_passes , fill = Poste_globale)) +
geom_boxplot() +
labs(title = "Distribution des moyennes des passes clées des joueurs en fonction du poste global", x = "Poste global", y = "Moyenne de passes clées par match") +
scale_fill_brewer(palette = "Set3")  # Vous pouvez changer la palette de couleurs selon vos préférences
ggplot(all_data, aes(x = Poste_globale, y = centre_perc , fill = Poste_globale)) +
geom_boxplot() +
labs(title = "Distribution des pourcentages de centres réussies des joueurs en fonction du poste global", x = "Poste global", y = "Pourcentage de centres réussis") +
scale_fill_brewer(palette = "Set3")  # Vous pouvez changer la palette de couleurs selon vos préférences
ggplot(all_data, aes(x = Poste_globale, y = degagement , fill = Poste_globale)) +
geom_boxplot() +
labs(title = "Distribution des dégagements des joueurs en fonction du poste global", x = "Poste global", y = "Dégagements") +
scale_fill_brewer(palette = "Set3")  # Vous pouvez changer la palette de couleurs selon vos préférences
all_data <- subset(all_data, select = -degagement)
ggplot(all_data, aes(x = Poste_globale, y = interception , fill = Poste_globale)) +
geom_boxplot() +
labs(title = "Distribution des interceptions des joueurs en fonction du poste global", x = "Poste global", y = "interception") +
scale_fill_brewer(palette = "Set3")  # Vous pouvez changer la palette de couleurs selon vos préférences
Tacles<- ggplot(all_data, aes(x = Poste_globale, y = TaclesRecu, fill = Poste_globale)) +
geom_boxplot() +  # Utiliser un boxplot pour la distribution
labs(title = "Tacles recus par postes",
x = "Postes ",
y = "Tacles recus")
# Afficher le graphique
print(Tacles)
Tir_bloques<- ggplot(all_data, aes(x = Poste_globale, y = tirsBloques, fill = Poste_globale)) +
geom_boxplot() +  # Utiliser un boxplot pour la distribution
labs(title = "Tirs bloqués par par postes",
x = "Postes ",
y = "Tirs bloqués")
# Afficher le graphique
print(Tir_bloques)
Dribles_subis<- ggplot(all_data, aes(x = Poste_globale, y = driblesSubis, fill = Poste_globale)) +
geom_boxplot() +  # Utiliser un boxplot pour la distribution
labs(title = "Dribles subis par par postes",
x = "Postes ",
y = "Dribles Subis")
# Afficher le graphique
print(Dribles_subis)
Fautes_postes<- ggplot(all_data, aes(x = Poste_globale, y = fautes, fill = Poste_globale)) +
geom_boxplot() +  # Utiliser un boxplot pour la distribution
labs(title = "Fautes par postes",
x = "Postes",
y = "Fautes moyenne par match")
# Afficher le graphique
print(Fautes_postes)
Tacles_postes<- ggplot(all_data, aes(x = Poste_globale, y = TaclesRecu, fill = Poste_globale)) +
geom_boxplot() +  # Utiliser un boxplot pour la distribution
labs(title = "Tacles recu par postes",
x = "Poste ",
y = "Tacles recu")
# Afficher le graphique
print(Tacles_postes)
Hors_jeu_poste<- ggplot(all_data, aes(x = Poste_globale, y = HorsJeu, fill = Poste_globale)) +
geom_boxplot() +  # Utiliser un boxplot pour la distribution
labs(title = "Hors jeu par postes",
x = "Poste ",
y = "Hors jeu")
# Afficher le graphique
print(Hors_jeu_poste)
all_data <- subset(all_data, select = -HorsJeu)
table_annee <- data.frame(table(all_data$Annee))
obs_annee <- ggplot(table_annee, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Observation par années",
x = "Année",
y = "Observations")
# Afficher le graphique
print(obs_annee)
# Supposons que votre dataframe s'appelle "votre_dataframe"
# Sélectionner seulement les colonnes avec des variables quantitatives
variables_quantitatives <- all_data %>%
select_if(is.numeric)
variables_quantitatives <- na.omit(variables_quantitatives)
# Calculer la matrice de corrélation
matrice_correlation <- cor(variables_quantitatives, use = "complete.obs")
# Afficher une heatmap avec corrplot
corrplot(matrice_correlation, method = "color", type = "lower", diag = FALSE, col = COL2('RdYlBu', 10))
View(all_data)
View(all_data)
gardien <- all_data |> filter(Poste_globale == "Gardien")
View(gardien)
Gardien <- all_data |> filter(Poste_globale == "Gardien")
Defenseur <- all_data |> filter(Poste_globale == "Défenseur")
Milieu <- all_data |> filter(Poste_globale == "Milieu")
Attaquant <- all_data |> filter(Poste_globale == "Attaquant")
gardien_density <- ggplot(Gardien, aes(Notes)) + geom_density()
gardien_density
gardien_density <- ggplot(Gardien, aes(Note)) + geom_density()
gardien_density
gardien_density <- ggplot(all_data, aes(Note, color = Poste_globale)) + geom_density()
gardien_density
density <- ggplot(all_data, aes(Note, color = Poste_globale)) + geom_density()
density
density
#### Chargement des packages ####
library(jsonlite)
library(tidyr)
library(ggplot2)
library(dplyr)
library(corrplot)
library(ggraph)
library(tidymodels)
View(Gardien)
#Création du modèle
lm_model <- linear_reg() |>
set_engine("lm") |>
set_mode("regression")
data_gardien <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Dribbles", "Passes_perc", "moy_passes", "centre_perc", "interception", "tacle", "tirBloques", "driblesSubis", "fautes", "TaclesRecu")
#Création du modèle
lm_model <- linear_reg() |>
set_engine("lm") |>
set_mode("regression")
data_gardien <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Dribbles", "Passes_perc", "moy_passes", "centre_perc", "interception", "tacle", "tirBloques", "driblesSubis", "fautes", "TaclesRecu")
#Création du jeu
lm_gardien_rec <- recipe(Note~ data_gardien, Gardien)
# Création du jeu
lm_gardien_rec <- recipe(Note ~ ., data = Gardien) %>%
update_role(all_predictors(), new_role = "predictor") %>%
update_role("Note", new_role = "response")
#Création du modèle
lm_model <- linear_reg() |>
set_engine("lm") |>
set_mode("regression")
data_gardien <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Dribbles", "Passes_perc", "moy_passes", "centre_perc", "interception", "tacle", "tirBloques", "driblesSubis", "fautes", "TaclesRecu")
# Création du jeu
lm_gardien_rec <- recipe(Note ~ ., data = Gardien) %>%
update_role(all_predictors(), new_role = "predictor") %>%
update_role("Note", new_role = "response") %>%
step_select(data_gardien)
#Création du modèle
lm_model <- linear_reg() |>
set_engine("lm") |>
set_mode("regression")
data_gardien <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Dribbles", "Passes_perc", "moy_passes", "centre_perc", "interception", "tacle", "tirBloques", "driblesSubis", "fautes", "TaclesRecu")
# Création du jeu
lm_gardien_rec <- recipe(Note ~ ., data = Gardien) %>%
update_role(all_predictors(), new_role = "predictor") %>%
update_role("Note", new_role = "response") %>%
step_select(data_gardien)
#Zone de workflow
lm_gardien_wf <- workflow() |>
add_model(lm_model) |>
add_recipe(lm_gardien_rec)
lm_gardien_fit <- lm_gardien_wf |>
fit(data = Gardien)
#Création du modèle
lm_model <- linear_reg() |>
set_engine("lm") |>
set_mode("regression")
data_gardien <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Dribbles", "Passes_perc", "moy_passes", "centre_perc", "interception", "tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu")
# Création du jeu
lm_gardien_rec <- recipe(Note ~ ., data = Gardien) %>%
update_role(all_predictors(), new_role = "predictor") %>%
update_role("Note", new_role = "response") %>%
step_select(data_gardien)
#Zone de workflow
lm_gardien_wf <- workflow() |>
add_model(lm_model) |>
add_recipe(lm_gardien_rec)
lm_gardien_fit <- lm_gardien_wf |>
fit(data = Gardien)
#Création du modèle
lm_model <- linear_reg() |>
set_engine("lm") |>
set_mode("regression")
data_gardien <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Dribbles", "Passes_perc", "moy_passes", "centre_perc", "interception", "tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu")
# Création du jeu
lm_gardien_rec <- recipe(Note ~., data = Gardien) %>%
update_role(all_predictors(), new_role = "predictor") %>%
update_role("Note", new_role = "response") %>%
step_select(data_gardien)
#Zone de workflow
lm_gardien_wf <- workflow() |>
add_model(lm_model) |>
add_recipe(lm_gardien_rec)
lm_gardien_fit <- lm_gardien_wf |>
fit(data = Gardien)
# Création du modèle
lm_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
data_gardien <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Dribbles", "Passes_perc", "moy_passes", "centre_perc", "interception", "tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu")
# Création du jeu
lm_gardien_rec <- recipe(Note ~., data = Gardien) %>%
update_role(all_predictors(), new_role = "predictor") %>%
update_role("Note", new_role = "response") %>%
step_select(data_gardien)
# Zone de workflow
lm_gardien_wf <- workflow() %>%
add_model(lm_model) %>%
add_recipe(lm_gardien_rec)
lm_gardien_fit <- lm_gardien_wf %>%
fit(data = Gardien)
#Création du modèle
lm_model <- linear_reg() |>
set_engine("lm") |>
set_mode("regression")
data_gardien <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Dribbles", "Passes_perc", "moy_passes", "centre_perc", "interception", "tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu")
# Création du jeu
lm_gardien_rec <- recipe(Note ~ ., data = Gardien) |>
update_role(all_predictors(), new_role = "predictor") |>
update_role("Note", new_role = "response") |>
step_select(data_gardien)
#Zone de workflow
lm_gardien_wf <- workflow() |>
add_model(lm_model) |>
add_recipe(lm_gardien_rec)
lm_gardien_fit <- lm_gardien_wf |>
fit(data = Gardien)
#Création du modèle
lm_model <- linear_reg() |>
set_engine("lm") |>
set_mode("regression")
data_gardien <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Dribbles", "Passes_perc", "moy_passes", "centre_perc", "interception", "tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu")
# Création du jeu
lm_gardien_rec <- recipe(Note ~., data = Gardien) |>
update_role(all_predictors(), new_role = "predictor") |>
update_role("Note", new_role = "response") |>
step_select(data_gardien)
#Zone de workflow
lm_gardien_wf <- workflow() |>
add_model(lm_model) |>
add_recipe(lm_gardien_rec)
lm_gardien_fit <- lm_gardien_wf |>
fit(data = Gardien)
#Création du modèle
lm_model <- linear_reg() |>
set_engine("lm") |>
set_mode("regression")
data_gardien <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Dribbles", "Passes_perc", "moy_passes", "centre_perc", "interception", "tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu")
# Création du jeu
lm_gardien_rec <- recipe(Note~., data = Gardien) |>
update_role(all_predictors(), new_role = "predictor") |>
update_role("Note", new_role = "response") |>
step_select(all_of(data_gardien))
#Zone de workflow
lm_gardien_wf <- workflow() |>
add_model(lm_model) |>
add_recipe(lm_gardien_rec)
lm_gardien_fit <- lm_gardien_wf |>
fit(data = Gardien)
#Création du modèle
lm_model <- linear_reg() |>
set_engine("lm") |>
set_mode("regression")
data_gardien <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Dribbles", "Passes_perc", "moy_passes", "centre_perc", "interception", "tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu")
# Création du jeu
lm_gardien_rec <- recipe(formula = Note~., data = Gardien) |>
update_role(all_predictors(), new_role = "predictor") |>
update_role("Note", new_role = "response") |>
step_select(data_gardien)
#Zone de workflow
lm_gardien_wf <- workflow() |>
add_model(lm_model) |>
add_recipe(lm_gardien_rec)
lm_gardien_fit <- lm_gardien_wf |>
fit(data = Gardien)
#Création du modèle
lm_model <- linear_reg() |>
set_engine("lm") |>
set_mode("regression")
data_gardien <- c("Age", "minJ", "Apparences", "But", "PasseDecisive", "Dribbles", "Passes_perc", "moy_passes", "centre_perc", "interception", "tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu")
# Création du jeu
lm_gardien_rec <- recipe(Note ~ ., data = Gardien) %>%
update_role(all_predictors(), new_role = "predictor") %>%
update_role("Note", new_role = "response") %>%
select(all_of(data_gardien))
#Création du modèle
lm_model <- linear_reg() |>
set_engine("lm") |>
set_mode("regression")
data_gardien <-Gardien |> select(c("Note","Age", "minJ", "Apparences", "But", "PasseDecisive", "Dribbles", "Passes_perc", "moy_passes", "centre_perc", "interception", "tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu"))
# Création du jeu
lm_gardien_rec <- recipe(Note ~ ., data = data_gardien)
#Zone de workflow
lm_gardien_wf <- workflow() |>
add_model(lm_model) |>
add_recipe(lm_gardien_rec)
lm_gardien_fit <- lm_gardien_wf |>
fit(data = data_gardien)
lm_gardien_fit |>tidy()
lm_gardien_fit |>glance()
#Création du modèle
lm_model <- linear_reg() |>
set_engine("lm") |>
set_mode("regression")
####Gardien ######
data_gardien <-Gardien |> select(c("Note","Age", "minJ", "Apparences", "But", "PasseDecisive", "Dribbles", "Passes_perc", "moy_passes", "centre_perc", "interception", "tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu"))
# Création du jeu
lm_gardien_rec <- recipe(Note ~ ., data = data_gardien)
#Zone de workflow
lm_gardien_wf <- workflow() |>
add_model(lm_model) |>
add_recipe(lm_gardien_rec)
lm_gardien_fit <- lm_gardien_wf |>
fit(data = data_gardien)
resultat_gard <- lm_gardien_fit |> tidy()
resultat_model_gard <- lm_gardien_fit |> glance()
#####Defenseur
data_def <-Defenseur |> select(c("Note","Age", "minJ", "Apparences", "But", "PasseDecisive", "Dribbles", "Passes_perc", "moy_passes", "centre_perc", "interception", "tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu"))
# Création du jeu
lm_def_rec <- recipe(Note ~ ., data = data_def)
#Zone de workflow
lm_def_wf <- workflow() |>
add_model(lm_model) |>
add_recipe(lm_def_rec)
lm_def_fit <- lm_def_wf |>
fit(data = data_def)
resultat_def <- lm_def_fit |> tidy()
resultat_model_def <- lm_def_fit |> glance()
resultat_def
resultat_model_def
#Création du modèle
lm_model <- linear_reg() |>
set_engine("lm") |>
set_mode("regression")
####Gardien ######
data_gardien <-Gardien |> select(c("Note","Age", "minJ", "Apparences", "But", "PasseDecisive", "Dribbles", "Passes_perc", "moy_passes", "centre_perc", "interception", "tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu"))
# Création du jeu
lm_gardien_rec <- recipe(Note ~ ., data = data_gardien)
#Zone de workflow
lm_gardien_wf <- workflow() |>
add_model(lm_model) |>
add_recipe(lm_gardien_rec)
lm_gardien_fit <- lm_gardien_wf |>
fit(data = data_gardien)
resultat_gard <- lm_gardien_fit |> tidy()
resultat_model_gard <- lm_gardien_fit |> glance()
#####Defenseur
data_def <-Defenseur |> select(c("Note","Age", "minJ", "Apparences", "But", "PasseDecisive", "Dribbles", "Passes_perc", "moy_passes", "centre_perc", "interception", "tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu"))
# Création du jeu
lm_def_rec <- recipe(Note ~ ., data = data_def)
#Zone de workflow
lm_def_wf <- workflow() |>
add_model(lm_model) |>
add_recipe(lm_def_rec)
lm_def_fit <- lm_def_wf |>
fit(data = data_def)
resultat_def <- lm_def_fit |> tidy()
resultat_model_def <- lm_def_fit |> glance()
#####Milieu
data_mil <-Milieu |> select(c("Note","Age", "minJ", "Apparences", "But", "PasseDecisive", "Dribbles", "Passes_perc", "moy_passes", "centre_perc", "interception", "tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu"))
# Création du jeu
lm_mil_rec <- recipe(Note ~ ., data = data_mil)
#Zone de workflow
lm_mil_wf <- workflow() |>
add_model(lm_model) |>
add_recipe(lm_mil_rec)
lm_mil_fit <- lm_mil_wf |>
fit(data = data_mil)
resultat_mil <- lm_mil_fit |> tidy()
resultat_model_mil <- lm_mil_fit |> glance()
#####Attaquant
data_att <-Attaquant |> select(c("Note","Age", "minJ", "Apparences", "But", "PasseDecisive", "Dribbles", "Passes_perc", "moy_passes", "centre_perc", "interception", "tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu"))
# Création du jeu
lm_att_rec <- recipe(Note ~ ., data = data_att)
#Zone de workflow
lm_att_wf <- workflow() |>
add_model(lm_model) |>
add_recipe(lm_att_rec)
lm_att_fit <- lm_att_wf |>
fit(data = data_att)
resultat_att <- lm_att_fit |> tidy()
resultat_model_att <- lm_att_fit |> glance()
resultat_att
resultat_model_att
resultat_mil
resultat_model_mil
resultat_def
View(resultat_def)
data_def <-Defenseur |> select(c("Note","Age", "minJ", "Apparences", "But", "PasseDecisive", "Dribbles", "Passes_perc", "moy_passes", "interception", "tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu"))
##Variable enlever
# Pourcentages de centres reussis
# Création du jeu
lm_def_rec <- recipe(Note ~ ., data = data_def)
#Zone de workflow
lm_def_wf <- workflow() |>
add_model(lm_model) |>
add_recipe(lm_def_rec)
lm_def_fit <- lm_def_wf |>
fit(data = data_def)
resultat_def <- lm_def_fit |> tidy()
resultat_model_def <- lm_def_fit |> glance()
resultat_def
resultat_model_def
resultat_gard
data_gardien <-Gardien |> select(c("Note","Age", "minJ", "Apparences", "Passes_perc", "moy_passes", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu"))
##Variables à enlever
#But
#Passes décisives
# Dribbles
#Centres
#Interception
#Tacles
# Création du jeu
lm_gardien_rec <- recipe(Note ~ ., data = data_gardien)
#Zone de workflow
lm_gardien_wf <- workflow() |>
add_model(lm_model) |>
add_recipe(lm_gardien_rec)
lm_gardien_fit <- lm_gardien_wf |>
fit(data = data_gardien)
resultat_gard <- lm_gardien_fit |> tidy()
resultat_model_gard <- lm_gardien_fit |> glance()
resultat_gard
resultat_model_gard
resultat_mil
data_mil <-Milieu |> select(c("Note", "minJ", "Apparences", "But", "PasseDecisive", "Dribbles", "Passes_perc", "moy_passes", "centre_perc", "interception", "tacle", "tirsBloques", "driblesSubis", "fautes", "TaclesRecu"))
##Variables à retirer
#Age
# Création du jeu
lm_mil_rec <- recipe(Note ~ ., data = data_mil)
#Zone de workflow
lm_mil_wf <- workflow() |>
add_model(lm_model) |>
add_recipe(lm_mil_rec)
lm_mil_fit <- lm_mil_wf |>
fit(data = data_mil)
resultat_mil <- lm_mil_fit |> tidy()
resultat_model_mil <- lm_mil_fit |> glance()
resultat_mil
resultat_att
data_att <-Attaquant |> select(c("Note", "minJ", "Apparences", "But", "PasseDecisive", "Passes_perc", "moy_passes", "centre_perc", "interception", "tacle", "tirsBloques", "driblesSubis", "TaclesRecu"))
##Variabels à retirer
#Age
#Dribbles
#fautes
# Création du jeu
lm_att_rec <- recipe(Note ~ ., data = data_att)
#Zone de workflow
lm_att_wf <- workflow() |>
add_model(lm_model) |>
add_recipe(lm_att_rec)
lm_att_fit <- lm_att_wf |>
fit(data = data_att)
resultat_att <- lm_att_fit |> tidy()
resultat_model_att <- lm_att_fit |> glance()
resultat_att
resultat_model_att
